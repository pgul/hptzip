##############################################################################
# Config-Makefile for Husky-packages
# You should modify this file according to your needs.
#
# $Id$
# $Name$
# $Log$
# Revision 1.1  2003/10/04 20:06:09  d_sergienko
# new variant of huskymak.cfg. will be moved to another location in future
#
#
##############################################################################
# Directories and filenames
##############################################################################

# Prefix for all directories
# Set to your homedir if you have no root privelegies
#PREFIX=/usr/local
PREFIX=/home/trooper/src/husky/usr

# The fidoconfig config file will be in this DIRECTORY:
CFGDIR=$(PREFIX)/etc

# Where libraries (both .a and .so files) should be placed
# You should take care that this directory is listed in the LD_LIBRARY_PATH
# environment variable (if necessary, modify your /etc/profile file).
LIBDIR=$(PREFIX)/lib

# Where the programs should be placed.
BINDIR=$(PREFIX)/bin

# Where manual pages should be placed.
MANDIR=$(PREFIX)/man

# Where include files should be placed (don't worry, no files will be over-
# written, Husky will use its own subdirectories below this directory):
INCDIR=$(PREFIX)/include

# If you have a working texinfo installation (consisting of the "makeinfo"
# and "install-info" programs), you should uncomment and adapt this 
# line - it will cause GNU info documentation to be built and installed
# into the given directory. If you leave the comment out, the documentation
# will not be compiled, and you won't know how to use the software ;-).
# You should take care that this directory is listed in the INFOPATH 
# environment variable (if necessary, modify your /etc/profile file).
INFODIR=$(PREFIX)/info

# The same as above, but for HTML documentation. This requires a working
# "texi2html" program.
HTMLDIR=$(PREFIX)/html

##############################################################################
# Build options
##############################################################################

# Build with debug information (for developers only)
DEBUG=0

# build profiled libraries and binaries (for developers only)
PROFILING=0

# Build with embedded perl support (requires installed perl 5.x)
PERL=0

# Build with hptzip support (requires installed zlib >= 1.1.3)
USE_HPTZIP=1

# Use 8.3 names (like in DOS)
# ATTENTION: 
# This switch is obsolete and probably does not work!
SHORTNAMES=0

# The DYNLIBS switch controls if dynamic or static linkage is used.
# This is tricky. If you set DYNLIBS=1, dynamic libraries (.so files)
# will be generated and used. This will only work if you are running "gcc"
# on Linux, FreeBSD or another real Unix operating system.

# On other systems, you must set DYNLIBS=0. Even on Linux, you might 
# want to do this if you are sick of shared library version mismatch
# problems.
DYNLIBS=1

# If you set DYNLIBS=0, but have Unix/Linux, you might want to build
# static binaries. Set STATIC_BUILD=1 if you want this, otherwise set
# STATIC_BUILD=0
STATIC_BUILD=0

##############################################################################
# User-specific compiler & linker options (For developers/advanced users)
##############################################################################

# Paths to additional includes, separated by colon
# example:
# HEADERS_SEARCH_PATH=/usr/include:/usr/local/include:.
HEADERS_SEARCH_PATH=

# Paths to additional libraries, separated by colon
# example:
# LIBRARIES_SEARCH_PATH=/usr/lib:/usr/local/lib:.
LIBRARIES_SEARCH_PATH=

# Additional compiler flags (for all c sources)
ADDCFLAGS=

# Additional compiler flags (for c cources when compiling binaries)
ADDCFLAGS_BIN=

# Additional compiler flags (for c cources when compiling libraries)
ADDCFLAGS_LIB=

# Additional linker flags (for all targets)
ADDLFLAGS=

# Additional linker flags (for binaries only)
ADDLFLAGS_BIN=

# Additional linker flags (for libraries only)
ADDLFLAGS_LIB=

# [EOF] ######################################################################
